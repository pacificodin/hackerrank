// this is code for find the lcm of first and factor of second array with all element 
// and integer multiple of first array lcm is also a factor of 2nd array with all element
// inputs are array ele no 2 3 ,[2,4],[16,32,96].
// 2 and 4 divide evenly into 4, 8, 12 and 16.
// 4, 8 and 16 divide evenly into 16, 32, 96.

// 4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'getTotalX' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY a
     *  2. INTEGER_ARRAY b
     */
//  if(a.every(ele => i % ele === 0) && b.every(ele => ele % i === 0)) 
    public static int getTotalX(List<Integer> a, List<Integer> b) {
    // Write your code here
    Collections.sort(b);
    int count=0; 
    int result=a.get(0);
    for(int i=1;i<a.size();i++){
        result=lcm(result,a.get(i));
        }
    int s=result;
    int q=1;
    while(s<=b.get(0)){
        boolean n=false;
        s=result*q;
        for(int k=0;k<b.size();k++){
            if(b.get(k)%s!=0){
                n= true;
            }       
        }
        q++;
       if(n==false){
                count++;
       }
    } 
    return count;
    }
    public static int lcm(int x,int y){
        
       return (x*y)/gcd(x,y);
        
    }
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);    
}}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> brr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int total = Result.getTotalX(arr, brr);

        bufferedWriter.write(String.valueOf(total));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
