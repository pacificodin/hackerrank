// returning a List<Integer> with finding the value
 // Game  Score  Minimum  Maximum   Min Max
 //     0      12     12       12       0   0
 //     1      24     12       24       0   1
 //     2      10     10       24       1   1
 //     3      24     10       24       1   1
// in above table given scoreslist in function and intial give min=max=score(0) the find the how many time it getting fluctuate from that incident
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'breakingRecords' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY scores as parameter.
     */

    public static List<Integer> breakingRecords(List<Integer> scores) {
    // Write your code here
    int min=0,max=0;
    int min_sco=scores.get(0);
    int max_sco=scores.get(0);
    List<Integer> mylist=new LinkedList<>();
    for(int i=1;i<scores.size();i++){
       if(scores.get(i)>max_sco){
           max_sco=scores.get(i);
           max++;
       } 
       else if(scores.get(i)<min_sco){
           min_sco=scores.get(i);
           min++;
       }
    }
    mylist.add(max);
    mylist.add(min);
    return mylist;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> scores = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.breakingRecords(scores);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
